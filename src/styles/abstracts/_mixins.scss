// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus,
    &:focus-within {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus,
    &:focus-within {
      @content;
    }
  }
}

@mixin dhdGrid($isSubgrid: false, $gap: var(--grid-gap)) {
  display: grid;
  gap: $gap;
  @if $isSubgrid {
    grid-column: var(--full-page-column-span);
    grid-template-columns: subgrid;
  } @else {
    grid-template-columns: repeat(12, [col-start] 1fr [col-end]);
    @include respond(beyondMobileWidth) {
      grid-template-columns: 1vw repeat(12, [col-start] 1fr [col-end]) 1vw;
    }
    @include respond(tablet) {
      grid-template-columns: 5vw repeat(12, [col-start] 1fr [col-end]) 5vw;
    }
    @include respond(desktop) {
      grid-template-columns: 15vw repeat(12, [col-start] 1fr [col-end]) 15vw;
    }
    @include respond(bigDesktop) {
      grid-template-columns: 20vw repeat(12, [col-start] 1fr [col-end]) 20vw;
    }
  }
}

@mixin flexCenter {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin backgroundWithImage(
  $backgroundImage: false,
  $backgroundBlendMode: multiply,
  $backgroundSize: cover,
  $backgroundPosition: center
) {
  @if $backgroundImage {
    background-image: $backgroundImage;
    background-size: $backgroundSize;
    background-position: $backgroundPosition;
    background-blend-mode: $backgroundBlendMode;
  }
}

@mixin backgroundGradientWithImage(
  $colorOne: var(--color-home-gradient-1),
  $colorTwo: var(--color-home-gradient-2),
  $backgroundImage: false,
  $backgroundSize: cover,
  $backgroundPosition: center,
  $backgroundBlendMode: multiply,
  $gradientOpacity: 0.6
) {
  @if $backgroundImage {
    background-image: linear-gradient(to bottom, $colorOne, $colorTwo),
      $backgroundImage;
    background-size: $backgroundSize;
    background-position: $backgroundPosition;
    background-blend-mode: $backgroundBlendMode;
  } @else {
    background-image: linear-gradient(
      to bottom right,
      rgba(var(--rgb-primary-dark), 0),
      var(--color-primary-dark)
    );
  }
}

// MEDIA QUERY MANAGER
// 0 - 600px:      Phone
// 600 - 900px:    Tablet portrait
// 900 - 1200px:   Tablet landscape
// 1060px only          SqueezeServices
// [1200 - 1800] is where our normal styles apply
// 1800px + :      Big desktop

// ORDER: Base + typography > general layout + grid > page layout > components

// 1em = 16px

@mixin respond($breakpoint) {
  @if $breakpoint == stubbyHeight {
    @media only screen and (max-height: 850px) and (min-width: 640px) {
      @content;
    }
  }

  @if $breakpoint == extraSmall {
    @media only screen and (min-width: 275px) {
      @content;
    }
  }

  @if $breakpoint == small {
    @media only screen and (min-width: 400px) {
      @content;
    }
  }
  @if $breakpoint == phone {
    @media only screen and (min-width: 600px) {
      @content;
    }
  }

  @if $breakpoint == beyondMobileWidth {
    @media only screen and (min-width: 640px) {
      @content;
    }
  }

  @if $breakpoint == tablet {
    @media only screen and (min-width: 895px) {
      @content;
    }
  }

@if $breakpoint == squeezeNarrowTablet {
  @media only screen and (min-width: 895px) and (max-width: 1060px) {
    @content;
  }
}

  @if $breakpoint == desktop {
    @media only screen and (min-width: 1200px) {
      @content;
    }
  }

  @if $breakpoint == bigDesktop {
    @media only screen and (min-width: 1500px) {
      @content;
    }
  }
}

@mixin iconDoIt($fill: var(--color-white), $padding: 1.2em, $fontSize: 9px) {
  @include flexCenter();
  flex: 0 0 var(--hit-zone);
  width: var(--hit-zone);
  height: var(--hit-zone);
  font-size: $fontSize;
  padding: $padding;
  fill: $fill;
}

@mixin blurBackground(
  $opacity: 0.9,
  $backgroundColor: var(--rgb-primary),
  $blurAmount: 10px
) {
  background-color: rgba($backgroundColor, $opacity);
  backdrop-filter: blur($blurAmount);
}
